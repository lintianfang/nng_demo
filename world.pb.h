// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_world_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_world_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_world_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_world_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_2eproto;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Object_Color;
class Object_ColorDefaultTypeInternal;
extern Object_ColorDefaultTypeInternal _Object_Color_default_instance_;
class Object_Orientation;
class Object_OrientationDefaultTypeInternal;
extern Object_OrientationDefaultTypeInternal _Object_Orientation_default_instance_;
class Object_Position;
class Object_PositionDefaultTypeInternal;
extern Object_PositionDefaultTypeInternal _Object_Position_default_instance_;
class Object_Size;
class Object_SizeDefaultTypeInternal;
extern Object_SizeDefaultTypeInternal _Object_Size_default_instance_;
class Scene;
class SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class Selection;
class SelectionDefaultTypeInternal;
extern SelectionDefaultTypeInternal _Selection_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Object* Arena::CreateMaybeMessage<::Object>(Arena*);
template<> ::Object_Color* Arena::CreateMaybeMessage<::Object_Color>(Arena*);
template<> ::Object_Orientation* Arena::CreateMaybeMessage<::Object_Orientation>(Arena*);
template<> ::Object_Position* Arena::CreateMaybeMessage<::Object_Position>(Arena*);
template<> ::Object_Size* Arena::CreateMaybeMessage<::Object_Size>(Arena*);
template<> ::Scene* Arena::CreateMaybeMessage<::Scene>(Arena*);
template<> ::Selection* Arena::CreateMaybeMessage<::Selection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Object_Type : int {
  Object_Type_UNKNOWN = 0,
  Object_Type_BOX = 1,
  Object_Type_BIN = 2,
  Object_Type_ARM = 3,
  Object_Type_Object_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Object_Type_Object_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Object_Type_IsValid(int value);
constexpr Object_Type Object_Type_Type_MIN = Object_Type_UNKNOWN;
constexpr Object_Type Object_Type_Type_MAX = Object_Type_ARM;
constexpr int Object_Type_Type_ARRAYSIZE = Object_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_Type_descriptor();
template<typename T>
inline const std::string& Object_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Object_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Object_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Object_Type_descriptor(), enum_t_value);
}
inline bool Object_Type_Parse(
    const std::string& name, Object_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Object_Type>(
    Object_Type_descriptor(), name, value);
}
// ===================================================================

class Object_Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Object.Position) */ {
 public:
  inline Object_Position() : Object_Position(nullptr) {};
  virtual ~Object_Position();

  Object_Position(const Object_Position& from);
  Object_Position(Object_Position&& from) noexcept
    : Object_Position() {
    *this = ::std::move(from);
  }

  inline Object_Position& operator=(const Object_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object_Position& operator=(Object_Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object_Position* internal_default_instance() {
    return reinterpret_cast<const Object_Position*>(
               &_Object_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Object_Position& a, Object_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Object_Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object_Position* New() const final {
    return CreateMaybeMessage<Object_Position>(nullptr);
  }

  Object_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object_Position& from);
  void MergeFrom(const Object_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Object.Position";
  }
  protected:
  explicit Object_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2eproto);
    return ::descriptor_table_world_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Object.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class Object_Size PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Object.Size) */ {
 public:
  inline Object_Size() : Object_Size(nullptr) {};
  virtual ~Object_Size();

  Object_Size(const Object_Size& from);
  Object_Size(Object_Size&& from) noexcept
    : Object_Size() {
    *this = ::std::move(from);
  }

  inline Object_Size& operator=(const Object_Size& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object_Size& operator=(Object_Size&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object_Size& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object_Size* internal_default_instance() {
    return reinterpret_cast<const Object_Size*>(
               &_Object_Size_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Object_Size& a, Object_Size& b) {
    a.Swap(&b);
  }
  inline void Swap(Object_Size* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object_Size* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object_Size* New() const final {
    return CreateMaybeMessage<Object_Size>(nullptr);
  }

  Object_Size* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object_Size>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object_Size& from);
  void MergeFrom(const Object_Size& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object_Size* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Object.Size";
  }
  protected:
  explicit Object_Size(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2eproto);
    return ::descriptor_table_world_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // float length = 1;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float width = 2;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 3;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:Object.Size)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float length_;
  float width_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class Object_Orientation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Object.Orientation) */ {
 public:
  inline Object_Orientation() : Object_Orientation(nullptr) {};
  virtual ~Object_Orientation();

  Object_Orientation(const Object_Orientation& from);
  Object_Orientation(Object_Orientation&& from) noexcept
    : Object_Orientation() {
    *this = ::std::move(from);
  }

  inline Object_Orientation& operator=(const Object_Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object_Orientation& operator=(Object_Orientation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object_Orientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object_Orientation* internal_default_instance() {
    return reinterpret_cast<const Object_Orientation*>(
               &_Object_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Object_Orientation& a, Object_Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Object_Orientation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object_Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object_Orientation* New() const final {
    return CreateMaybeMessage<Object_Orientation>(nullptr);
  }

  Object_Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object_Orientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object_Orientation& from);
  void MergeFrom(const Object_Orientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object_Orientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Object.Orientation";
  }
  protected:
  explicit Object_Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2eproto);
    return ::descriptor_table_world_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:Object.Orientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class Object_Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Object.Color) */ {
 public:
  inline Object_Color() : Object_Color(nullptr) {};
  virtual ~Object_Color();

  Object_Color(const Object_Color& from);
  Object_Color(Object_Color&& from) noexcept
    : Object_Color() {
    *this = ::std::move(from);
  }

  inline Object_Color& operator=(const Object_Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object_Color& operator=(Object_Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object_Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object_Color* internal_default_instance() {
    return reinterpret_cast<const Object_Color*>(
               &_Object_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Object_Color& a, Object_Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Object_Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object_Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object_Color* New() const final {
    return CreateMaybeMessage<Object_Color>(nullptr);
  }

  Object_Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object_Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object_Color& from);
  void MergeFrom(const Object_Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object_Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Object.Color";
  }
  protected:
  explicit Object_Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2eproto);
    return ::descriptor_table_world_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // float r = 1;
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float g = 2;
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // float b = 3;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // @@protoc_insertion_point(class_scope:Object.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float r_;
  float g_;
  float b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class Object PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Object) */ {
 public:
  inline Object() : Object(nullptr) {};
  virtual ~Object();

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2eproto);
    return ::descriptor_table_world_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Object_Position Position;
  typedef Object_Size Size;
  typedef Object_Orientation Orientation;
  typedef Object_Color Color;

  typedef Object_Type Type;
  static constexpr Type UNKNOWN =
    Object_Type_UNKNOWN;
  static constexpr Type BOX =
    Object_Type_BOX;
  static constexpr Type BIN =
    Object_Type_BIN;
  static constexpr Type ARM =
    Object_Type_ARM;
  static inline bool Type_IsValid(int value) {
    return Object_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Object_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Object_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Object_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Object_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Object_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Object_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPosFieldNumber = 3,
    kSizeFieldNumber = 4,
    kOrientationFieldNumber = 5,
    kColorFieldNumber = 6,
    kTypeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .Object.Position pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Object_Position& pos() const;
  ::Object_Position* release_pos();
  ::Object_Position* mutable_pos();
  void set_allocated_pos(::Object_Position* pos);
  private:
  const ::Object_Position& _internal_pos() const;
  ::Object_Position* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Object_Position* pos);
  ::Object_Position* unsafe_arena_release_pos();

  // .Object.Size size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::Object_Size& size() const;
  ::Object_Size* release_size();
  ::Object_Size* mutable_size();
  void set_allocated_size(::Object_Size* size);
  private:
  const ::Object_Size& _internal_size() const;
  ::Object_Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::Object_Size* size);
  ::Object_Size* unsafe_arena_release_size();

  // .Object.Orientation orientation = 5;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::Object_Orientation& orientation() const;
  ::Object_Orientation* release_orientation();
  ::Object_Orientation* mutable_orientation();
  void set_allocated_orientation(::Object_Orientation* orientation);
  private:
  const ::Object_Orientation& _internal_orientation() const;
  ::Object_Orientation* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::Object_Orientation* orientation);
  ::Object_Orientation* unsafe_arena_release_orientation();

  // .Object.Color color = 6;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::Object_Color& color() const;
  ::Object_Color* release_color();
  ::Object_Color* mutable_color();
  void set_allocated_color(::Object_Color* color);
  private:
  const ::Object_Color& _internal_color() const;
  ::Object_Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::Object_Color* color);
  ::Object_Color* unsafe_arena_release_color();

  // .Object.Type type = 2;
  void clear_type();
  ::Object_Type type() const;
  void set_type(::Object_Type value);
  private:
  ::Object_Type _internal_type() const;
  void _internal_set_type(::Object_Type value);
  public:

  // @@protoc_insertion_point(class_scope:Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::Object_Position* pos_;
  ::Object_Size* size_;
  ::Object_Orientation* orientation_;
  ::Object_Color* color_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class Scene PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Scene) */ {
 public:
  inline Scene() : Scene(nullptr) {};
  virtual ~Scene();

  Scene(const Scene& from);
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scene* New() const final {
    return CreateMaybeMessage<Scene>(nullptr);
  }

  Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Scene";
  }
  protected:
  explicit Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2eproto);
    return ::descriptor_table_world_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .Object objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >*
      mutable_objects();
  private:
  const ::Object& _internal_objects(int index) const;
  ::Object* _internal_add_objects();
  public:
  const ::Object& objects(int index) const;
  ::Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Scene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class Selection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Selection) */ {
 public:
  inline Selection() : Selection(nullptr) {};
  virtual ~Selection();

  Selection(const Selection& from);
  Selection(Selection&& from) noexcept
    : Selection() {
    *this = ::std::move(from);
  }

  inline Selection& operator=(const Selection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Selection& operator=(Selection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Selection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Selection* internal_default_instance() {
    return reinterpret_cast<const Selection*>(
               &_Selection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Selection& a, Selection& b) {
    a.Swap(&b);
  }
  inline void Swap(Selection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Selection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Selection* New() const final {
    return CreateMaybeMessage<Selection>(nullptr);
  }

  Selection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Selection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Selection& from);
  void MergeFrom(const Selection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Selection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Selection";
  }
  protected:
  explicit Selection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2eproto);
    return ::descriptor_table_world_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:Selection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Object_Position

// float x = 1;
inline void Object_Position::clear_x() {
  x_ = 0;
}
inline float Object_Position::_internal_x() const {
  return x_;
}
inline float Object_Position::x() const {
  // @@protoc_insertion_point(field_get:Object.Position.x)
  return _internal_x();
}
inline void Object_Position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Object_Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Object.Position.x)
}

// float y = 2;
inline void Object_Position::clear_y() {
  y_ = 0;
}
inline float Object_Position::_internal_y() const {
  return y_;
}
inline float Object_Position::y() const {
  // @@protoc_insertion_point(field_get:Object.Position.y)
  return _internal_y();
}
inline void Object_Position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Object_Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Object.Position.y)
}

// float z = 3;
inline void Object_Position::clear_z() {
  z_ = 0;
}
inline float Object_Position::_internal_z() const {
  return z_;
}
inline float Object_Position::z() const {
  // @@protoc_insertion_point(field_get:Object.Position.z)
  return _internal_z();
}
inline void Object_Position::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Object_Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Object.Position.z)
}

// -------------------------------------------------------------------

// Object_Size

// float length = 1;
inline void Object_Size::clear_length() {
  length_ = 0;
}
inline float Object_Size::_internal_length() const {
  return length_;
}
inline float Object_Size::length() const {
  // @@protoc_insertion_point(field_get:Object.Size.length)
  return _internal_length();
}
inline void Object_Size::_internal_set_length(float value) {
  
  length_ = value;
}
inline void Object_Size::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:Object.Size.length)
}

// float width = 2;
inline void Object_Size::clear_width() {
  width_ = 0;
}
inline float Object_Size::_internal_width() const {
  return width_;
}
inline float Object_Size::width() const {
  // @@protoc_insertion_point(field_get:Object.Size.width)
  return _internal_width();
}
inline void Object_Size::_internal_set_width(float value) {
  
  width_ = value;
}
inline void Object_Size::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Object.Size.width)
}

// float height = 3;
inline void Object_Size::clear_height() {
  height_ = 0;
}
inline float Object_Size::_internal_height() const {
  return height_;
}
inline float Object_Size::height() const {
  // @@protoc_insertion_point(field_get:Object.Size.height)
  return _internal_height();
}
inline void Object_Size::_internal_set_height(float value) {
  
  height_ = value;
}
inline void Object_Size::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Object.Size.height)
}

// -------------------------------------------------------------------

// Object_Orientation

// float x = 1;
inline void Object_Orientation::clear_x() {
  x_ = 0;
}
inline float Object_Orientation::_internal_x() const {
  return x_;
}
inline float Object_Orientation::x() const {
  // @@protoc_insertion_point(field_get:Object.Orientation.x)
  return _internal_x();
}
inline void Object_Orientation::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Object_Orientation::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Object.Orientation.x)
}

// float y = 2;
inline void Object_Orientation::clear_y() {
  y_ = 0;
}
inline float Object_Orientation::_internal_y() const {
  return y_;
}
inline float Object_Orientation::y() const {
  // @@protoc_insertion_point(field_get:Object.Orientation.y)
  return _internal_y();
}
inline void Object_Orientation::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Object_Orientation::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Object.Orientation.y)
}

// float z = 3;
inline void Object_Orientation::clear_z() {
  z_ = 0;
}
inline float Object_Orientation::_internal_z() const {
  return z_;
}
inline float Object_Orientation::z() const {
  // @@protoc_insertion_point(field_get:Object.Orientation.z)
  return _internal_z();
}
inline void Object_Orientation::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Object_Orientation::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Object.Orientation.z)
}

// float w = 4;
inline void Object_Orientation::clear_w() {
  w_ = 0;
}
inline float Object_Orientation::_internal_w() const {
  return w_;
}
inline float Object_Orientation::w() const {
  // @@protoc_insertion_point(field_get:Object.Orientation.w)
  return _internal_w();
}
inline void Object_Orientation::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Object_Orientation::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Object.Orientation.w)
}

// -------------------------------------------------------------------

// Object_Color

// float r = 1;
inline void Object_Color::clear_r() {
  r_ = 0;
}
inline float Object_Color::_internal_r() const {
  return r_;
}
inline float Object_Color::r() const {
  // @@protoc_insertion_point(field_get:Object.Color.r)
  return _internal_r();
}
inline void Object_Color::_internal_set_r(float value) {
  
  r_ = value;
}
inline void Object_Color::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:Object.Color.r)
}

// float g = 2;
inline void Object_Color::clear_g() {
  g_ = 0;
}
inline float Object_Color::_internal_g() const {
  return g_;
}
inline float Object_Color::g() const {
  // @@protoc_insertion_point(field_get:Object.Color.g)
  return _internal_g();
}
inline void Object_Color::_internal_set_g(float value) {
  
  g_ = value;
}
inline void Object_Color::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:Object.Color.g)
}

// float b = 3;
inline void Object_Color::clear_b() {
  b_ = 0;
}
inline float Object_Color::_internal_b() const {
  return b_;
}
inline float Object_Color::b() const {
  // @@protoc_insertion_point(field_get:Object.Color.b)
  return _internal_b();
}
inline void Object_Color::_internal_set_b(float value) {
  
  b_ = value;
}
inline void Object_Color::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:Object.Color.b)
}

// -------------------------------------------------------------------

// Object

// string id = 1;
inline void Object::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Object::id() const {
  // @@protoc_insertion_point(field_get:Object.id)
  return _internal_id();
}
inline void Object::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Object.id)
}
inline std::string* Object::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Object.id)
  return _internal_mutable_id();
}
inline const std::string& Object::_internal_id() const {
  return id_.Get();
}
inline void Object::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Object::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Object.id)
}
inline void Object::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Object.id)
}
inline void Object::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Object.id)
}
inline std::string* Object::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Object::release_id() {
  // @@protoc_insertion_point(field_release:Object.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Object.id)
}
inline std::string* Object::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Object.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Object::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Object.id)
}

// .Object.Type type = 2;
inline void Object::clear_type() {
  type_ = 0;
}
inline ::Object_Type Object::_internal_type() const {
  return static_cast< ::Object_Type >(type_);
}
inline ::Object_Type Object::type() const {
  // @@protoc_insertion_point(field_get:Object.type)
  return _internal_type();
}
inline void Object::_internal_set_type(::Object_Type value) {
  
  type_ = value;
}
inline void Object::set_type(::Object_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Object.type)
}

// .Object.Position pos = 3;
inline bool Object::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Object::has_pos() const {
  return _internal_has_pos();
}
inline void Object::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::Object_Position& Object::_internal_pos() const {
  const ::Object_Position* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Object_Position*>(
      &::_Object_Position_default_instance_);
}
inline const ::Object_Position& Object::pos() const {
  // @@protoc_insertion_point(field_get:Object.pos)
  return _internal_pos();
}
inline void Object::unsafe_arena_set_allocated_pos(
    ::Object_Position* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Object.pos)
}
inline ::Object_Position* Object::release_pos() {
  auto temp = unsafe_arena_release_pos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Object_Position* Object::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Object.pos)
  
  ::Object_Position* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Object_Position* Object::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Object_Position>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::Object_Position* Object::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Object.pos)
  return _internal_mutable_pos();
}
inline void Object::set_allocated_pos(::Object_Position* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Object.pos)
}

// .Object.Size size = 4;
inline bool Object::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool Object::has_size() const {
  return _internal_has_size();
}
inline void Object::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::Object_Size& Object::_internal_size() const {
  const ::Object_Size* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Object_Size*>(
      &::_Object_Size_default_instance_);
}
inline const ::Object_Size& Object::size() const {
  // @@protoc_insertion_point(field_get:Object.size)
  return _internal_size();
}
inline void Object::unsafe_arena_set_allocated_size(
    ::Object_Size* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Object.size)
}
inline ::Object_Size* Object::release_size() {
  auto temp = unsafe_arena_release_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Object_Size* Object::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:Object.size)
  
  ::Object_Size* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::Object_Size* Object::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::Object_Size>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::Object_Size* Object::mutable_size() {
  // @@protoc_insertion_point(field_mutable:Object.size)
  return _internal_mutable_size();
}
inline void Object::set_allocated_size(::Object_Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:Object.size)
}

// .Object.Orientation orientation = 5;
inline bool Object::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Object::has_orientation() const {
  return _internal_has_orientation();
}
inline void Object::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::Object_Orientation& Object::_internal_orientation() const {
  const ::Object_Orientation* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Object_Orientation*>(
      &::_Object_Orientation_default_instance_);
}
inline const ::Object_Orientation& Object::orientation() const {
  // @@protoc_insertion_point(field_get:Object.orientation)
  return _internal_orientation();
}
inline void Object::unsafe_arena_set_allocated_orientation(
    ::Object_Orientation* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Object.orientation)
}
inline ::Object_Orientation* Object::release_orientation() {
  auto temp = unsafe_arena_release_orientation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Object_Orientation* Object::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:Object.orientation)
  
  ::Object_Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::Object_Orientation* Object::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Object_Orientation>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::Object_Orientation* Object::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:Object.orientation)
  return _internal_mutable_orientation();
}
inline void Object::set_allocated_orientation(::Object_Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:Object.orientation)
}

// .Object.Color color = 6;
inline bool Object::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Object::has_color() const {
  return _internal_has_color();
}
inline void Object::clear_color() {
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::Object_Color& Object::_internal_color() const {
  const ::Object_Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Object_Color*>(
      &::_Object_Color_default_instance_);
}
inline const ::Object_Color& Object::color() const {
  // @@protoc_insertion_point(field_get:Object.color)
  return _internal_color();
}
inline void Object::unsafe_arena_set_allocated_color(
    ::Object_Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Object.color)
}
inline ::Object_Color* Object::release_color() {
  auto temp = unsafe_arena_release_color();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Object_Color* Object::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:Object.color)
  
  ::Object_Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::Object_Color* Object::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::Object_Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::Object_Color* Object::mutable_color() {
  // @@protoc_insertion_point(field_mutable:Object.color)
  return _internal_mutable_color();
}
inline void Object::set_allocated_color(::Object_Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:Object.color)
}

// -------------------------------------------------------------------

// Scene

// repeated .Object objects = 1;
inline int Scene::_internal_objects_size() const {
  return objects_.size();
}
inline int Scene::objects_size() const {
  return _internal_objects_size();
}
inline void Scene::clear_objects() {
  objects_.Clear();
}
inline ::Object* Scene::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Scene.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >*
Scene::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Scene.objects)
  return &objects_;
}
inline const ::Object& Scene::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::Object& Scene::objects(int index) const {
  // @@protoc_insertion_point(field_get:Scene.objects)
  return _internal_objects(index);
}
inline ::Object* Scene::_internal_add_objects() {
  return objects_.Add();
}
inline ::Object* Scene::add_objects() {
  // @@protoc_insertion_point(field_add:Scene.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >&
Scene::objects() const {
  // @@protoc_insertion_point(field_list:Scene.objects)
  return objects_;
}

// -------------------------------------------------------------------

// Selection

// string id = 1;
inline void Selection::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Selection::id() const {
  // @@protoc_insertion_point(field_get:Selection.id)
  return _internal_id();
}
inline void Selection::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Selection.id)
}
inline std::string* Selection::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Selection.id)
  return _internal_mutable_id();
}
inline const std::string& Selection::_internal_id() const {
  return id_.Get();
}
inline void Selection::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Selection::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Selection.id)
}
inline void Selection::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Selection.id)
}
inline void Selection::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Selection.id)
}
inline std::string* Selection::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Selection::release_id() {
  // @@protoc_insertion_point(field_release:Selection.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Selection::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Selection.id)
}
inline std::string* Selection::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Selection.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Selection::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Selection.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Object_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Object_Type>() {
  return ::Object_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_world_2eproto
